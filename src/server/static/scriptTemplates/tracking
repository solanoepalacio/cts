'use strict'

function trackingTemplate () {
  // for developers:
  let _ENV = '{{{environment}}}'
  if (_ENV === '{{{environment}}}') {
    _ENV = 'production'
  }

  const consoleLog = console.log
  const wrappedLog = function (env, ...logs) {
    if (env !== 'production') {
      consoleLog(...logs)
    }
  }
  console.log = wrappedLog.bind(console, _ENV)

  const host = '{{{host}}}'
  const domainId = '{{{domainId}}}'

  const configEvents = '{{{configEvents}}}'

  let events
  if (configEvents !== '{{{configEvents}}}') {
    try {
      events = JSON.parse(configEvents)
    } catch (error) {
      events = false
      // TODO => log error to server.
    }
  } else {
    events = false
  }

  // if (events) {
  //   // start loading events async
  //   window.CTSdata = { events }
  //   const eventsScript = document.createElement('script')

  //   eventsScript.setAttribute('async', true)
  //   eventsScript.setAttribute('src', host + '/public/loader/events')

  //   const firstScript = document.getElementsByTagName('script')[0]

  //   firstScript.parentNode.insertBefore(eventsScript, firstScript)
  // }

  let bounceTimeout = '{{{bounceTimeout}}}' // from config (how much time to consider not bouncing)
  if (bounceTimeout === '{{{bounceTimeout}}}') {
    bounceTimeout = 4 // segs
  }

  const session = {
    domainId: domainId,
    windowWidth: window.innerWidth,
    windowHeight: window.innerHeight,
    referrer: document.referrer,
    platform: navigator.platform,
    language: navigator.language,
    eventTypes: events,
    clicks: [],
    events: [],
    views: [], // paths
    bounced: true
  }

  session.__proto__.addClick = addClickToSession.bind(session)

  function addClickToSession (clickEvent) {
    this.clicks.push(
      {
        // what info should be tracked could also be getted from the config
        // note: can we reconstruct the element to show it on cts app?
        url: document.location.href,
        timestamp: Number(Date.now()),
        position: { x: clickEvent.clientX, y: clickEvent.clientY }
        // if more info is needed: ...
      }
    )
  }

  session.__proto__.addView = addViewToSession.bind(session)

  function addViewToSession (hashChangeEvent) {
    this.views.push(
      {
        url: document.location.href,
        referrer: document.referrer,
        timestamp: Number(Date.now())
      }
    )
  }

  session.__proto__.addEvent = addEventToSession.bind(session)

  function addEventToSession ({ eventType, timestamp, url }) {
    this.events.push(
      {
        url,
        eventType,
        timestamp
      }
    )
  }

  session.__proto__.save = saveSession.bind(session)

  function saveSession (fallbackSave) {
    if (!fallbackSave) {
      this.bounced = false
    }
    // keep saving every 120 seconds
    setTimeout(this.save, 120 * 1000)
    let data = Object.assign({}, this)
    // used server-side to calculate the timezone
    data.clientDate = Date.now()

    const options = {
      method: 'POST',
      mode: 'cors',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    }

    fetch(host + '/public/session/save', options)
      .then((response) => {
        if (_ENV !== 'production') {
          console.log('[session-save] response status:', response.status)
          return response.json()
        }
        return Promise.resolve(false)
      })
      .then((response) => {
        if (response) {
          console.log('[session-save] response:', response)
        }
      })
      .catch((error) => {
        if (_ENV !== 'production') {
          console.log('[session-save] request Error', error)
        }
      })
  }

  session.__proto__.end = endSession.bind(session)

  function endSession () {
    this.clientDate = Date.now() // used server-side to calculate timezone
    if (navigator.sendBeacon) {
      let data = '?'
      const dataKeys = Object.keys(this)
      for (let i = 0; i < dataKeys.length; i++) {
        const key = dataKeys[i]
        if (i !== 0) {
          data += '&'
        }
        data += key
        data += '='
        data += typeof this[key] === 'object' ? JSON.stringify(this[key]) : this[key]
      }
      data += '&isBeacon=true'
      navigator.sendBeacon(host + '/public/session/end' + data)
    } else {
      const data = Object.assign({}, this)
      const keys = selectKeys(data)
      const options = {
        method: 'POST',
        mode: 'cors',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data, keys)
      }
      // this request might never get to the server.
      fetch(host + 'public/session/end', options)
    }
  }

  if (!navigator.sendBeacon) {
    session.save(true) //  cant be sure if the session will be saved otherwise
  }

  window.setTimeout(session.save, bounceTimeout * 1000)

  window.onunload = () => {
    session.end()
  }

  window.onload = () => {
    session.addView()
    window.addEventListener('click', session.addClick)
  }

  function selectKeys (data) {
    const keys = []
    Object.keys(data).forEach((key) => {
      if (typeof data[key] === 'object' && !Array.isArray(data[key])) {
        const subKeys = selectKeys(data[key])
        keys.concat(subKeys)
        return
      }
      keys.push(key)
    })
    return keys
  }

  if (!session.eventTypes) {
    return
  }

  function createEvents (eventSetters) {
    const { eventTypes } = session
    for (const event of eventTypes) {
      const { type } = event
      eventSetters[type](event)
    }
  }

  createEvents({
    click: function (eventConfig) {
      if (!checkMatchingPath) {
        console.log('no matching path')
        return
      }
      const elements = getCtsElements(eventConfig._id)

      if (!elements || !elements.length) {
        // TODO:
        // fetch(// notifications::: target event not found in path...)
        window.alert('targetElement not found for event:', eventConfig)
        console.warn(eventConfig)
        return
      }

      if (eventConfig.unique && elements.length > 1) {
        // TODO:
        // fetch(// notifications::: events conflict in path...)
        window.alert('event conflict exists for this path')
        return
      }

      for (const element of elements) {
        const listener = logClickEvent.bind(element, eventConfig)
        eventConfig.listener = listener
        element.addEventListener('click', listener, { capture: true })
        // see capture option at:
        // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#Matching_event_listeners_for_removal
      }
      function logClickEvent (eventConfig, event) {
        console.log('adding event to session', eventConfig)
        session.addEvent({
          eventType: eventConfig._id,
          timestamp: Number(new Date()),
          url: document.location.href
        })

        if (!eventConfig.bubbles) {
          event.preventDefault && event.preventDefault()
          event.stopPropagation && event.stopPropagation()
        }

        if (!eventConfig.multi) {
          this.removeEventListener('click', eventConfig.listener, { capture: true })
        }
      }
    },

    scrollBottom: function (eventConfig) {
      if (!checkMatchingPath) {
        return
      }

      const elements = getCtsElements(eventConfig._id)
      if (!elements || !elements.length) {
        // notify error
      }

      if (eventConfig.unique && elements.length > 1) {
        // notify conflict
      }

      // for (const element of elements) {

      // }
    }
  })

  function getCtsElements (dataId) {
    const options = [
      `div[data-cts="${dataId}"]`,
      `span[data-cts="${dataId}"]`,
      `.cts-${dataId}`,
      `#cts-${dataId}`
    ]
    for (const selector of options) {
      const nodeList = document.querySelectorAll(selector)
      if (nodeList.length) {
        return nodeList
      }
    }
    return null
  }

  function checkMatchingPath (eventConfig) {
    const { match, includeChildren } = eventConfig
    const currentPath = document.location.pathName || window.location.pathName
    const currentPathVariant = currentPath.replace(/\//g, ' ').trim().replace(' ', '/')

    if (
      currentPath !== match &&
  currentPathVariant !== match &&
  (!includeChildren || !currentPath.includes(match))
    ) {
      return false// event does not belong to this path.
      // TODO => Call events() on hash change (and remove unnecessary listeners)
    }
    return true
  }
}
trackingTemplate()
